{"version":3,"sources":["components/OneContact/OneContact.module.css","components/Filter/Filter.module.css","components/Container/Container.module.css","components/ContactList/ContactList.module.css","components/Container/Container.js","redux/contacts/actions.js","components/OneContact/OneContact.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","redux/contacts/reducers.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","Container","children","className","styles","container","addContact","createAction","name","number","payload","id","uuidv4","deleteContact","changeFilter","Contact","onDelete","item","text","btn","type","onClick","getContacts","state","contacts","getFilter","filter","getVisibleContacts","contact","toLowerCase","includes","ContactForm","useSelector","dispatch","useDispatch","useState","setName","setNumber","handleChange","e","target","value","form","onSubmit","preventDefault","find","toLocaleLowerCase","alert","actions","label","input","pattern","title","onChange","required","ContactList","list","map","onDeleteContact","Filter","filterLabel","filterInput","App","contactReducer","createReducer","filterReducer","_","action","rootReducer","combineReducers","persistConfig","key","storage","blacklist","persistedReducer","persistReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.fd093887.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"OneContact_item__2-SL0\",\"text\":\"OneContact_text__qh9M9\",\"btn\":\"OneContact_btn__1qcZc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterInput\":\"Filter_filterInput__36vzA\",\"filterLabel\":\"Filter_filterLabel__2YQdn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__ECQzP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__1sC6J\"};","import PropTypes from 'prop-types';\r\nimport styles from './Container.module.css';\r\n\r\nfunction Container({ children }) {\r\n  return <div className={styles.container}>{children}</div>;\r\n}\r\n\r\nContainer.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default Container;\r\n","import { v4 as uuidv4 } from 'uuid';\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\nconst addContact = createAction('contact/add', (name, number) => ({\r\n  payload: {\r\n    id: uuidv4(),\r\n    name,\r\n    number,\r\n  },\r\n}));\r\n\r\nconst deleteContact = createAction('contact/delete');\r\nconst changeFilter = createAction('contact/change_filter');\r\n\r\n// const addContact = ({ name, number }) => ({\r\n//   type: 'contact/add',\r\n//   payload: {\r\n//     id: uuidv4(),\r\n//     name,\r\n//     number,\r\n//   },\r\n// });\r\n\r\n// const deleteContact = contactId => ({\r\n//   type: 'contact/delete',\r\n//   payload: contactId,\r\n// });\r\n\r\n// const changeFilter = contacts => ({\r\n//   type: 'contact/change_filter',\r\n//   payload: contacts,\r\n// });\r\n\r\nexport default { addContact, deleteContact, changeFilter };\r\n","import styles from './OneContact.module.css';\r\n\r\nconst Contact = ({ name, number, onDelete }) => (\r\n  <div className={styles.item}>\r\n    <p className={styles.text}>\r\n      {name}:{number}\r\n    </p>\r\n    <button className={styles.btn} type=\"button\" onClick={onDelete}>\r\n      Delete\r\n    </button>\r\n  </div>\r\n);\r\n\r\nexport default Contact;\r\n","export const getContacts = state => state.contacts;\r\nexport const getFilter = state => state.filter;\r\n\r\nexport const getVisibleContacts = state => {\r\n  const contacts = getContacts(state);\r\n  const filter = getFilter(state);\r\n\r\n  return contacts.filter(contact =>\r\n    contact.name.toLowerCase().includes(filter.toLowerCase())\r\n  );\r\n};\r\n","import { Component } from 'react';\r\nimport { useState } from 'react';\r\nimport styles from './ContactForm.module.css';\r\nimport actions from '../../redux/contacts/actions';\r\nimport { connect, useSelector, useDispatch } from 'react-redux';\r\nimport Contact from '../OneContact/OneContact';\r\nimport { getContacts } from '../../redux/contacts/selectors';\r\n\r\n// class ContactForm extends Component {\r\nfunction ContactForm() {\r\n  const contacts = useSelector(getContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  // state = {\r\n  //   name: '',\r\n  //   number: '',\r\n  // };\r\n\r\n  const handleChange = e => {\r\n    const { name, value } = e.target;\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  //  handleChange = e => {\r\n  //   const { name, value } = e.target;\r\n  //   this.setState({\r\n  //     [name]: value,\r\n  //   });\r\n  // };\r\n\r\n  const resetForm = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n  // resetForm = () => {\r\n  //   this.setState({ name: '', number: '' });\r\n  // };\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    if (\r\n      contacts.find(\r\n        contact => contact.name.toLowerCase() === name.toLocaleLowerCase()\r\n      )\r\n    ) {\r\n      return alert(`${name} is already exist`);\r\n    }\r\n    dispatch(actions.addContact(name, number));\r\n    // addNewContact({ name, number });\r\n    resetForm();\r\n  };\r\n  // const handleSubmit = e => {\r\n  //   e.preventDefault();\r\n  //   addNewContact({ name, number });\r\n  //   resetForm();\r\n  // };\r\n\r\n  //  handleSubmit = e => {\r\n  //   e.preventDefault();\r\n  //   // this.props.addNewContact(this.state);\r\n  //   this.props.onAdd(this.state);\r\n  //   this.resetForm();\r\n  // };\r\n\r\n  // render() {\r\n  //   const { name, number } = this.state;\r\n  return (\r\n    <form className={styles.form} onSubmit={handleSubmit}>\r\n      <label className={styles.label}>\r\n        Name\r\n        <input\r\n          className={styles.input}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          value={name}\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          onChange={handleChange}\r\n          required\r\n        />\r\n      </label>\r\n      <label className={styles.label}>\r\n        Number\r\n        <input\r\n          className={styles.input}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          value={number}\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          onChange={handleChange}\r\n          required\r\n        />\r\n      </label>\r\n      <button className={styles.btn} type=\"submit\">\r\n        Add contact\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n// }\r\n\r\n// const mapStateToProps = state => ({\r\n//   contactList: state.contacts,\r\n// });\r\n\r\n// const mapDispatchToProps = dispatch => {\r\n//   return {\r\n//     onAdd: ({ name, number }) => dispatch(actions.addContact({ name, number })),\r\n//   };\r\n// };\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n\r\nexport default ContactForm;\r\n","import styles from './ContactList.module.css';\r\nimport Contact from '../OneContact/OneContact';\r\nimport { connect, useSelector, useDispatch } from 'react-redux';\r\nimport actions from '../../redux/contacts/actions';\r\nimport { getVisibleContacts } from '../../redux/contacts/selectors';\r\n\r\n// const ContactList = ({ contacts, onDeleteContact }) => (\r\nconst ContactList = () => {\r\n  const contacts = useSelector(getVisibleContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  const onDeleteContact = id => dispatch(actions.deleteContact(id));\r\n  return (\r\n    <ul className={styles.list}>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li key={id}>\r\n          <Contact\r\n            name={name}\r\n            number={number}\r\n            onDelete={() => onDeleteContact(id)}\r\n          />\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\n// const visibleContacts = (contacts, filter) => {\r\n//   return contacts.filter(contact =>\r\n//     contact.name.toLowerCase().includes(filter.toLowerCase())\r\n//   );\r\n// };\r\n\r\n// const mapStateToProps = ({ contacts, filter }) => ({\r\n//   contacts: visibleContacts(contacts, filter),\r\n// });\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//   onDeleteContact: id => dispatch(actions.deleteContact(id)),\r\n// });\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n\r\nexport default ContactList;\r\n","import actions from '../../redux/contacts/actions';\r\nimport styles from './Filter.module.css';\r\nimport { connect, useSelector, useDispatch } from 'react-redux';\r\nimport { getFilter } from '../../redux/contacts/selectors';\r\n\r\n// const Filter = ({ contacts, onChange }) => (\r\nconst Filter = () => {\r\n  const contacts = useSelector(getFilter);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <label className={styles.filterLabel}>\r\n      Find contacts by name\r\n      <input\r\n        className={styles.filterInput}\r\n        type=\"text\"\r\n        value={contacts}\r\n        onChange={e => dispatch(actions.changeFilter(e.target.value))}\r\n      />\r\n    </label>\r\n  );\r\n};\r\n\r\n// const mapStateToProps = state => ({\r\n//   value: state.contacts.filter,\r\n// });\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//   onChange: e => dispatch(actions.changeFilter(e.target.value)),\r\n// });\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\nexport default Filter;\r\n","import { Component } from 'react';\r\nimport './App.css';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Container from './components/Container/Container';\r\nimport ContactForm from './components/ContactForm/ContactForm';\r\nimport ContactList from './components/ContactList/ContactList';\r\nimport Filter from './components/Filter/Filter';\r\n\r\nexport default function App() {\r\n  // state = {\r\n  //   // contacts: [\r\n  //   //   { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n  //   //   { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n  //   //   { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n  //   //   { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n  //   // ],\r\n  //   filter: '',\r\n  // };\r\n\r\n  // componentDidMount() {\r\n  //   const localContacts = localStorage.getItem('contacts');\r\n  //   const parsedContacts = JSON.parse(localContacts);\r\n  //   if (parsedContacts) {\r\n  //     this.setState({ contacts: parsedContacts });\r\n  //   }\r\n  // }\r\n\r\n  // componentDidUpdate(prevProps, prevState) {\r\n  //   if (prevState.contacts !== this.state.contacts) {\r\n  //     localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\r\n  //   }\r\n  // }\r\n\r\n  // addNewContact = ({ name, number }) => {\r\n  //   const contact = {\r\n  //     id: uuidv4(),\r\n  //     name,\r\n  //     number,\r\n  //   };\r\n\r\n  //   this.state.contacts.find(({ name }) => name === contact.name)\r\n  //     ? alert(`${contact.name} already exists`)\r\n  //     : this.setState(prevState => {\r\n  //         return {\r\n  //           contacts: [...prevState.contacts, contact],\r\n  //         };\r\n  //       });\r\n  // };\r\n\r\n  // changeFilter = e => {\r\n  //   this.setState({ filter: e.currentTarget.value });\r\n  // };\r\n\r\n  // deleteContact = id => {\r\n  //   this.setState(prevState => {\r\n  //     return {\r\n  //       contacts: prevState.contacts.filter(contact => contact.id !== id),\r\n  //     };\r\n  //   });\r\n  // };\r\n\r\n  // render() {\r\n  //   const { filter } = this.state;\r\n  //   const visibleContacts = this.state.contacts.filter(contact =>\r\n  //     contact.name.toLowerCase().includes(this.state.filter.toLowerCase())\r\n  //   );\r\n  return (\r\n    <Container>\r\n      <h1>Phonebook</h1>\r\n      <ContactForm />\r\n\r\n      <h2>Contacts</h2>\r\n      <Filter />\r\n      <ContactList />\r\n    </Container>\r\n  );\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport actions from './actions';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\n\r\nconst initialState = [\r\n  { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n  { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n  { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n  { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n];\r\n\r\nexport const contactReducer = createReducer(initialState, {\r\n  [actions.addContact]: (state, { payload }) => [...state, payload],\r\n  [actions.deleteContact]: (state, { payload }) =>\r\n    state.filter(contact => contact.id !== payload),\r\n});\r\n\r\nexport const filterReducer = createReducer('', {\r\n  'contact/change_filter': (_, action) => action.payload,\r\n});\r\n\r\n// export const contactReducer = (state = initialState, action) => {\r\n//   switch (action.type) {\r\n//     case 'contact/add':\r\n//       return [...state, action.payload];\r\n\r\n//     case 'contact/delete':\r\n//       return state.filter(({ id }) => id !== action.payload);\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// export const filterReducer = (state = '', action) => {\r\n//   switch (action.type) {\r\n//     case 'contact/change_filter':\r\n//       return action.payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n","import { configureStore, combineReducers } from '@reduxjs/toolkit';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport { contactReducer, filterReducer } from './contacts/reducers';\r\n\r\nconst rootReducer = combineReducers({\r\n  contacts: contactReducer,\r\n  filter: filterReducer,\r\n});\r\n\r\nconst persistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nconst store = configureStore({\r\n  reducer: persistedReducer,\r\n  middleware: getDefaultMiddleware =>\r\n    getDefaultMiddleware({\r\n      serializableCheck: {\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n      },\r\n    }),\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport { store, persistor };\r\n\r\n// import { createStore, combineReducers } from 'redux';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\n// import { contactReducer, filterReducer } from './contacts/reducers';\r\n\r\n// const rootReducer = combineReducers({\r\n//   contacts: contactReducer,\r\n//   filter: filterReducer,\r\n// });\r\n\r\n// export const store = createStore(rootReducer, composeWithDevTools());\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store, persistor } from './redux/store';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <PersistGate loading={null} persistor={persistor}>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </PersistGate>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"ContactForm_input__RJbXp\",\"label\":\"ContactForm_label__iANHG\",\"btn\":\"ContactForm_btn__2ljZi\"};"],"sourceRoot":""}